name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'src/pythonrag/**'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'src/pythonrag/**'
      - '.github/workflows/docs.yml'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build-docs:
    name: Build documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git info plugin

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-docs-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-docs-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs,dev]"

      - name: Verify MkDocs configuration
        run: |
          mkdocs --version
          python -c "import mkdocs; print('MkDocs version:', mkdocs.__version__)"

      - name: Build documentation
        run: |
          mkdocs build --verbose --clean

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: site/

      - name: Setup Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/configure-pages@v3

      - name: Upload to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-pages-artifact@v2
        with:
          path: site/

  # Documentation quality checks
  docs-quality:
    name: Documentation quality checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs,dev]"

      - name: Check for broken links (internal)
        run: |
          mkdocs build --clean
          echo "Checking for broken internal links..."
          # Simple check for common markdown link issues
          find docs -name "*.md" -exec grep -l "\]\(" {} \; | while read file; do
            echo "Checking links in $file"
            grep -n "\]\(" "$file" || true
          done

      - name: Validate markdown syntax
        run: |
          # Check that all markdown files are properly formatted
          find docs -name "*.md" | while read file; do
            echo "Validating $file"
            python -c "
            import sys
            try:
                with open('$file', 'r', encoding='utf-8') as f:
                    content = f.read()
                    # Basic validation - check for common issues
                    if '```' in content:
                        code_blocks = content.count('```')
                        if code_blocks % 2 != 0:
                            print(f'‚ùå Unclosed code block in $file')
                            sys.exit(1)
                    print(f'‚úÖ $file syntax valid')
            except Exception as e:
                print(f'‚ùå Error reading $file: {e}')
                sys.exit(1)
            "
          done

      - name: Check documentation completeness
        run: |
          echo "Checking for TODO items in documentation..."
          find docs -name "*.md" -exec grep -Hn "TODO\|FIXME\|XXX" {} \; || echo "No TODO items found"

  # Deployment job (only on main branch)
  deploy:
    name: Deploy to GitHub Pages
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build-docs, docs-quality]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # Comment on PR with preview link
  pr-comment:
    name: Comment on PR
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [build-docs]
    permissions:
      pull-requests: write
    steps:
      - name: Download documentation artifacts
        uses: actions/download-artifact@v3
        with:
          name: documentation

      - name: Comment PR
        uses: actions/github-script@v6
        with:
          script: |
            const { readdir } = require('fs').promises;
            
            // Check if docs were built successfully
            try {
              const files = await readdir('.');
              const hasIndex = files.includes('index.html');
              
              const comment = hasIndex 
                ? `üìö **Documentation Preview Built Successfully** ‚úÖ
                
                The documentation has been built and validated for this PR.
                
                **Changes detected in:**
                - Documentation files
                - Source code (affects API docs)
                
                **Quality checks:**
                - ‚úÖ MkDocs build successful
                - ‚úÖ Markdown syntax validation
                - ‚úÖ Internal link validation
                
                Once merged to main, the documentation will be automatically deployed to GitHub Pages.`
                : `‚ùå **Documentation Build Failed**
                
                There was an issue building the documentation for this PR. Please check the workflow logs for details.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Error checking documentation build:', error);
            } 
