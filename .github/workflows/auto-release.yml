name: Auto Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/**'
      - 'docs/**'
      - '*.md'
      - 'LICENSE'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Run tests before auto-release
    uses: ./.github/workflows/ci.yml

  auto-release:
    name: Create automatic development release
    runs-on: ubuntu-latest
    needs: test
    if: |
      github.ref == 'refs/heads/main' &&
      !contains(github.event.head_commit.message, '[skip release]') &&
      !contains(github.event.head_commit.message, '[skip auto-release]') &&
      !contains(github.event.head_commit.message, 'docs:') &&
      !contains(github.event.head_commit.message, 'ci:')
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Generate development version
      id: version
      run: |
        # Get the current version from the package
        PACKAGE_VERSION=$(python -c "from src.pythonrag import __version__; print(__version__)")
        
        # Get commit hash (short)
        COMMIT_HASH=$(git rev-parse --short HEAD)
        
        # Get current timestamp
        TIMESTAMP=$(date +"%Y%m%d%H%M%S")
        
        # Create development version
        DEV_VERSION="${PACKAGE_VERSION}.dev${TIMESTAMP}+${COMMIT_HASH}"
        
        echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
        echo "dev_version=$DEV_VERSION" >> $GITHUB_OUTPUT
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        
        echo "📦 Package Version: $PACKAGE_VERSION"
        echo "🚀 Development Version: $DEV_VERSION"

    - name: Update version for development release
      run: |
        # Temporarily update the version in __init__.py for the build
        sed -i.bak "s/__version__ = \".*\"/__version__ = \"${{ steps.version.outputs.dev_version }}\"/" src/pythonrag/__init__.py
        echo "Updated version to ${{ steps.version.outputs.dev_version }}"

    - name: Build package
      run: python -m build

    - name: Restore original version
      run: |
        # Restore the original version
        mv src/pythonrag/__init__.py.bak src/pythonrag/__init__.py

    - name: Check distribution
      run: twine check dist/*

    - name: Generate release notes
      id: release_notes
      run: |
        # Get the latest commit message
        COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
        COMMIT_DATE=$(git log -1 --pretty=format:"%ci")
        
        # Create release notes
        cat > release_notes.md << EOF
        ## 🔄 Development Release ${{ steps.version.outputs.dev_version }}
        
        This is an automatic development release based on the latest commit to the main branch.
        
        **📝 Latest Commit:**
        - **Message:** ${COMMIT_MSG}
        - **Author:** ${COMMIT_AUTHOR}
        - **Date:** ${COMMIT_DATE}
        - **Hash:** ${{ steps.version.outputs.commit_hash }}
        
        **⚠️ Development Release Notice:**
        This is a development release and may contain experimental features or breaking changes.
        For stable releases, please use the tagged versions.
        
        **📦 Installation:**
        \`\`\`bash
        pip install https://github.com/${{ github.repository }}/releases/download/dev-${{ steps.version.outputs.dev_version }}/pythonrag-${{ steps.version.outputs.dev_version }}-py3-none-any.whl
        \`\`\`
        
        **🔗 Links:**
        - [View Changes](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
        - [Compare with Previous](https://github.com/${{ github.repository }}/compare/HEAD~1..HEAD)
        - [Documentation](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)
        EOF

    - name: Delete previous development release
      continue-on-error: true
      run: |
        # Delete previous dev release if it exists
        gh release delete "dev-latest" --yes || echo "No previous dev-latest release found"
        git push origin :refs/tags/dev-latest || echo "No previous dev-latest tag found"
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Create development release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: dev-${{ steps.version.outputs.dev_version }}
        release_name: "🔄 Development Release ${{ steps.version.outputs.dev_version }}"
        body_path: release_notes.md
        draft: false
        prerelease: true

    - name: Upload wheel to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/pythonrag-${{ steps.version.outputs.dev_version }}-py3-none-any.whl
        asset_name: pythonrag-${{ steps.version.outputs.dev_version }}-py3-none-any.whl
        asset_content_type: application/octet-stream

    - name: Upload source distribution to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/pythonrag-${{ steps.version.outputs.dev_version }}.tar.gz
        asset_name: pythonrag-${{ steps.version.outputs.dev_version }}.tar.gz
        asset_content_type: application/gzip

    - name: Create latest development tag
      run: |
        # Create or update a 'dev-latest' tag that always points to the latest development release
        git tag -f dev-latest ${{ github.sha }}
        git push origin dev-latest --force

    - name: Create latest development release
      continue-on-error: true
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: dev-latest
        release_name: "🚀 Latest Development Release"
        body: |
          ## 🚀 Latest Development Release
          
          This release always contains the latest development version from the main branch.
          
          **Current Version:** ${{ steps.version.outputs.dev_version }}
          **Commit:** ${{ github.sha }}
          
          For the specific release notes, see: [dev-${{ steps.version.outputs.dev_version }}](https://github.com/${{ github.repository }}/releases/tag/dev-${{ steps.version.outputs.dev_version }})
        draft: false
        prerelease: true

    - name: Comment on commit
      uses: actions/github-script@v6
      with:
        script: |
          const version = '${{ steps.version.outputs.dev_version }}';
          const commitHash = '${{ steps.version.outputs.commit_hash }}';
          
          const message = `🚀 **Development Release Created!**

          **Release:** [dev-${version}](https://github.com/${{ github.repository }}/releases/tag/dev-${version})
          **Version:** \`${version}\`
          
          **📦 Quick Install:**
          \`\`\`bash
          pip install https://github.com/${{ github.repository }}/releases/download/dev-${version}/pythonrag-${version}-py3-none-any.whl
          \`\`\`
          
          **🔗 Links:**
          - [📋 Release Notes](https://github.com/${{ github.repository }}/releases/tag/dev-${version})
          - [📚 Documentation](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)
          - [⚡ Latest Dev Release](https://github.com/${{ github.repository }}/releases/tag/dev-latest)
          `;

          await github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: message
          });

  notify:
    name: Notify about auto-release
    runs-on: ubuntu-latest
    needs: auto-release
    if: always() && github.ref == 'refs/heads/main'
    steps:
    - name: Release notification
      uses: actions/github-script@v6
      with:
        script: |
          const success = '${{ needs.auto-release.result }}' === 'success';
          const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
          
          let message = `## 🤖 Auto-Release Pipeline ${success ? '✅ Completed' : '❌ Failed'}\n\n`;
          
          if (success) {
            message += `🎉 A new development release has been automatically created for this commit!\n\n`;
            message += `**📦 Features:**\n`;
            message += `- ✅ Automatic versioning with commit hash\n`;
            message += `- ✅ Development release with install instructions\n`;
            message += `- ✅ Always-updated \`dev-latest\` tag\n`;
            message += `- ✅ Comprehensive release notes\n\n`;
            message += `**🔗 Quick Links:**\n`;
            message += `- [📋 All Releases](https://github.com/${{ github.repository }}/releases)\n`;
            message += `- [⚡ Latest Development](https://github.com/${{ github.repository }}/releases/tag/dev-latest)\n`;
          } else {
            message += `❌ The auto-release pipeline failed. Please check the [workflow run](${runUrl}) for details.\n\n`;
            message += `**Common issues:**\n`;
            message += `- Build failures\n`;
            message += `- Test failures\n`;
            message += `- Permission issues\n`;
          }
          
          // This could be extended to send to Slack, Discord, email, etc.
          console.log(message); 
