name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write  # For trusted publishing to PyPI

jobs:
  test:
    name: Run tests before release
    uses: ./.github/workflows/ci.yml

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check distribution
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Get version from tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog for this version if CHANGELOG.md exists
        if [ -f CHANGELOG.md ]; then
          echo "Extracting changelog for ${{ steps.get_version.outputs.version }}"
          # This is a simple extraction - you might want to use a more sophisticated tool
          awk '/^## \[${{ steps.get_version.outputs.version_number }}\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > current_changelog.md || echo "No changelog found for this version" > current_changelog.md
        else
          echo "## What's Changed" > current_changelog.md
          echo "" >> current_changelog.md
          echo "See the commit history for details of what changed in this release." >> current_changelog.md
        fi

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body_path: current_changelog.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'rc') }}

    - name: Upload Release Assets
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Get the release
          const release = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: '${{ steps.get_version.outputs.version }}'
          });
          
          // Upload all files in dist/
          const distDir = 'dist';
          const files = fs.readdirSync(distDir);
          
          for (const file of files) {
            const filePath = path.join(distDir, file);
            const stats = fs.statSync(filePath);
            
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: file,
              data: fs.readFileSync(filePath)
            });
            
            console.log(`Uploaded ${file}`);
          }

  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, github-release]
    environment:
      name: pypi
      url: https://pypi.org/p/pythonrag
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Use trusted publishing - no API token needed
        # Configure this in PyPI under your project settings
        print-hash: true

  test-pypi-publish:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: build
    if: contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/pythonrag
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        print-hash: true

  docs-deploy:
    name: Deploy release documentation
    runs-on: ubuntu-latest
    needs: github-release
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Build and deploy docs
      run: |
        mkdocs gh-deploy --force

  notify:
    name: Notify about release
    runs-on: ubuntu-latest
    needs: [pypi-publish, docs-deploy]
    if: always()
    steps:
    - name: Notify release status
      uses: actions/github-script@v6
      with:
        script: |
          const version = '${{ needs.github-release.outputs.version || github.ref_name }}';
          const pypiSuccess = '${{ needs.pypi-publish.result }}' === 'success';
          const docsSuccess = '${{ needs.docs-deploy.result }}' === 'success';
          
          let message = `üéâ **Release ${version} Status Update**\n\n`;
          message += `- üì¶ **PyPI Publication**: ${pypiSuccess ? '‚úÖ Success' : '‚ùå Failed'}\n`;
          message += `- üìö **Documentation**: ${docsSuccess ? '‚úÖ Deployed' : '‚ùå Failed'}\n\n`;
          
          if (pypiSuccess && docsSuccess) {
            message += `üöÄ Release ${version} is now live!\n\n`;
            message += `**Install with:**\n\`\`\`bash\npip install --upgrade pythonrag\n\`\`\`\n\n`;
            message += `**Documentation:** https://${context.repo.owner}.github.io/${context.repo.repo}/`;
          } else {
            message += `‚ö†Ô∏è Some parts of the release process failed. Please check the workflow logs.`;
          }
          
          // Comment on the latest commit
          await github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: message
          }); 
