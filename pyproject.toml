[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pythonrag"
dynamic = ["version"]
description = "A modern Python package for Retrieval-Augmented Generation (RAG) workflows"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = [
    "rag",
    "retrieval-augmented-generation",
    "llm",
    "vector-database",
    "embeddings",
    "nlp",
    "ai",
    "machine-learning"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "requests>=2.25.0",
    "tqdm>=4.60.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pre-commit>=3.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.23.0",
]
embeddings = [
    "sentence-transformers>=2.2.0",
    "openai>=1.0.0",
    "transformers>=4.20.0",
    "torch>=1.12.0",
]
vectordb = [
    "chromadb>=0.4.0",
    "pinecone-client>=2.2.0",
    "weaviate-client>=3.20.0",
    "qdrant-client>=1.5.0",
]
llm = [
    "openai>=1.0.0",
    "anthropic>=0.3.0",
    "langchain>=0.1.0",
]
all = [
    "pythonrag[embeddings,vectordb,llm]",
]

[project.urls]
Homepage = "https://github.com/franzejr/PythonRAG"
Documentation = "https://pythonrag.readthedocs.io"
Repository = "https://github.com/franzejr/PythonRAG"
Issues = "https://github.com/franzejr/PythonRAG/issues"
Changelog = "https://github.com/franzejr/PythonRAG/blob/main/CHANGELOG.md"

[project.scripts]
pythonrag = "pythonrag.cli:main"

[tool.hatch.version]
path = "src/pythonrag/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/pythonrag"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=pythonrag",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
show_missing = true
skip_covered = false
precision = 2 
 